#import "/_settings/typst/template-qk-note.typ": *
#show: doc => conf(
  title: "Notion de pannes",
  course: "SDR - Syst√®mes Distribu√©s et Repartis",
  author: "Guillaume Tr√ºeb",
  date: "16 septembre 2025",
  toc: true,
  col: 1,
  doc,
)

= Types de pannes
== Panne permantante
Une panne permanente est une d√©faillance d'un composant du syst√®me qui persiste ind√©finiment.

Dans notre cas, on dit qu'un processus est correct en terme de panne permanente quand il ne tombera jamais en panne permanente.

#heigimg("S7/SDR/docs/img/image copy 15.png", "Panne permanente")

#info[
  L'aspect *correct* est une caract√©ristique th√©orique.
  - Elle servira √† analyser les algorithmes.
  - Elle n'a aucun sens dans la vraie vie.
]

== Panne r√©cup√©rable
Une panne r√©cup√©rable est une d√©faillance d'un composant du syst√®me qui peut √™tre corrig√©e, permettant au composant de revenir √† un √©tat de fonctionnement normal.

Lors-ce que notre processus revient d'une panne, il se peut qu'il ait perdu des informations, dans ce cas nous parlons d'*amn√©sie*.

#heigimg("S7/SDR/docs/img/image copy 16.png", "Panne r√©cup√©rable")

On dit qu'un processus est correct en terme de panne r√©cup√©rable quand il existe un instant T apr√®s lequel il ne tombera plus en panne.

#heigimg("S7/SDR/docs/img/image copy 17.png", "Panne r√©cup√©rable - correct")

#colbreak()

== Panne arbitraire (Byzantine)
Une panne arbitraire, aussi appel√©e panne byzantine, est une d√©faillance d'un composant du syst√®me qui peut se comporter de mani√®re impr√©visible ou malveillante, affectant la fiabilit√© et la s√©curit√© du syst√®me.

#heigimg("S7/SDR/docs/img/image copy 18.png", "Panne byzantine")

On dit qu'un processus est correct en terme de panne arbitraire quand il suivra toujours l'algorithme attendu.

#note[
  Les pannes byzantines sont les plus difficiles et couteuses √† g√©rer dans les syst√®mes distribu√©s, car elles peuvent impliquer des comportements malveillants ou erratiques.
]

== Autres types de pannes
- *Panne d'omission*: lorsqu'un message devant √™tre envoy√© ne l'est pas.
- *Panne d'eavesdropping*: lorsqu'un message peut √™tre lu par une entit√© ext√©rieure au syst√®me.

= D√©tecteur de pannes

== D√©tecteur de pannes parfait
Un d√©tecteur de pannes parfait est un m√©canisme qui permet d'identifier avec certitude les processus d√©faillants dans un syst√®me distribu√©.

#heigimg("S7/SDR/docs/img/image copy 19.png", "D√©tecteur de pannes parfait")

=== Propri√©t√©s
- *Compl√©tude*: Un jour, tout processus en panne sera d√©tect√© par tous les processus corrects.
- *Pr√©cision*: Si un processus `p`est d√©tect√© par un quelconque processus, alors `p` est effectivement en panne.

== Heartbeat
Un d√©tecteur de pannes de type *heartbeat* est un m√©canisme utilis√© dans les syst√®mes distribu√©s pour surveiller l'√©tat des processus en envoyant p√©riodiquement des signaux (ou "battements de c≈ìur") entre eux.

=== Exemple

#heigimg("S7/SDR/docs/img/image copy 20.png", "D√©tecteur de pannes Heartbeat", width: 80%)

#heigimg("S7/SDR/docs/img/image copy 21.png", "D√©tecteur de pannes Heartbeat - exemple", width: 80%)

Dans ces exemples, nous voyons que notre syst√®me r√©pond aux deux propri√©t√©s d'un d√©tecteur de pannes parfait.

#warning[
  Cependant la supposition d'un syst√®me synchrone est irr√©aliste. Les vrais r√©seaux ne nous donnent pas de garantie sur la dur√©e de transit du message. C'est pourquoi ce genre de d√©tecteur de type Heartbeat donnera potentiellement des faux positifs, *la notion de `T` unit√© de temps n'existe pas*.
]

== D√©tecteur de pannes parfait #underline[un jour]
Un d√©tecteur de pannes parfait *un jour* est un m√©canisme qui garantit que, apr√®s un certain temps, tous les processus corrects auront d√©tect√© tous les processus en panne, tout en maintenant la pr√©cision.

#heigimg("S7/SDR/docs/img/image copy 22.png", "D√©tecteur de pannes parfait un jour")

=== Propri√©t√©s
- *Compl√©tude*: Un jour, tout processus en panne sera d√©tect√© par tous les processus corrects.
- *Pr√©cision un jour*: *Un jour*, aucun processus correct ne sera suspect√© par processus correct.

#colbreak()

=== Timeout dynamique
#heigimg("S7/SDR/docs/img/image copy 23.png", "D√©tecteur de pannes parfait un jour - timeout dynamique", width: 80%)

Gr√¢ce √† cette nouvelle d√©finition, nous pouvons donc affirmer les informations suivantes:

- Compl√©tude: Un jour, tout processus en panne sera d√©tect√© par tous les processus corrects.
  - _Oui, un processus en panne permanente ne r√©pondra plus aux pings, et apr√®s ùö´, cette panne sera d√©couverte._
- Pr√©cision un jour: Un jour, aucun processus correct ne sera suspect√© par processus correct.
  - _Oui, un processus correct (en terme de panne permanente comme r√©cup√©rable) r√©pondra aux pings en un temps fini ; quand ùö´ sera assez grand, plus de panne ne sera suspect√©e : tout processus sera soit "en panne" et suspect√© pour toujours, ou "correct" et plus jamais suspect√©._

#note[
  Pour r√©soudre ce probl√®me, √©tait-il n√©cessaire d'avoir un timeout dynamique?
  - Oui, sinon on risquerait de constamment suspecter un processus qui est simplement lent mais bien correct.
]